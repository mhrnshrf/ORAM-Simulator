// Configuration file
// Assumes a 3.2GHz processor with a single channel of 800 MHz DDR3 (1600 Mbps)
// All timing parameters must be in terms of DRAM clk cycles. Processor and DRAM clk should be in MHz
// Differences from ddr3-1600:  larger ROBSIZE, larger MAX_RETIRE, more CHANNELS, larger WQ, different ADDRESS_MAPPING to support high parallelism

PROCESSOR_CLK_MULTIPLIER 4
ROBSIZE		160
MAX_RETIRE	4
MAX_FETCH	4
PIPELINEDEPTH	10

NUM_CHANNELS	4
NUM_RANKS	2
NUM_BANKS	8
NUM_ROWS	32768
NUM_COLUMNS	128
CACHE_LINE_SIZE	128
ADDRESS_BITS	35  // This must match the addresses in the traces.  It must also be the sum of logs of the previous six numbers (NUM_CHANNELS, NUM_RANKS, NUM_BANKS, NUM_ROWS, NUM_COLUMNS, CACHE_LINE_SIZE).

//DRAM_CLK_FREQUENCY  800
//T_RCD	11 
//T_RP	11 
//T_CAS	11
//T_RC	39
//T_RAS	28
//T_RRD	5
//T_FAW	32
//T_WR	12
//T_WTR	6
//T_RTP	6
//T_CCD	4
//T_RFC	128
//T_REFI	6240 
//T_CWD	5
//T_RTRS	2
//T_PD_MIN	4
//T_XP	5
//T_XP_DLL	20
//T_DATA_TRANS	4

WQ_CAPACITY	48
ADDRESS_MAPPING	0
WQ_LOOKUP_LATENCY 10 // in processor cycles

TIMEOUT_ENABLE    0          // 0/1 flag to disable/enable finishing the program in case it get stuck
SUBTREE_ENABLE    0          // 0/1 flag to disable/enable having subtree adddressing scheme
CACHE_ENABLE      1          // 0/1 flag to disable/enable having cache
WRITE_BYPASS      0          // 0/1 flag to disable/enable cacheing the path id along the data in the LLC which will benefit write reqs to   posmap lookup 
RHO_ENABLE        0          // 0/1 flag to disable/enable having rho
TIMING_ENABLE     0          // 0/1 flag to disable/enable having timing channel security
PREFETCH_ENABLE   0          // 0/1 flag to disable/enable having prefetching option in case of having timing channel security
EARLY_ENABLE      0          // 0/1 flag to disable/enable early eviction option in case of having timing channel security
SNAPSHOT_ENABLE   0          // 0/1 flag to disable/enable performing snapshot by making path oram accesses
NONSEC_ENABLE     0          // 0/1 flag to disable/enable oram simulation if off usimm runs normally
BK_EVICTION       0          // 0/1 flag to disable/enable background eviction
RHO_BK_EVICTION   0          // 0/1 flag to disable/enable background eviction in rho
SNAP_CACHE        0          // 0/1 flag to disable/enable  snapshot with having L2 cache
RAND_ENABLE       0          // 0/1 flag to disable/enable rand address instead of trace addr
WSKIP_ENABLE      0          // 0/1 flag to disable/enable write linger feature for ring oram
SKIP_ENABLE       0          // 0/1 flag to disable/enable skip middle level feature for ring oram
LINGER_BASE       0          // 0/1 flag to disable/enable write linger baseline for ring oram
DUMMY_ENABLE      1          // 0/1 flag to disable/enable dummy enable baseline for ring oram
DYNAMIC_EP        0          // 0/1 flag that indicates whether ep occur based on number of reshuffles rather than static schedule or 
META_ENABLE       0          // 0/1 flag that indicates whether stale info is stored in metadata tree
SIM_ENABLE        1          // 0/1 flag that indicates whether usimm simulation is enabled if disabled only oram alg runs
WAIT_ENABLE       0          // 0/1 flag that indicates whether wait for last read req to complete
LLC_DIRTY         0          // 0/1 flag that indicates whether everything is dirty eviction from cache
DEAD_ENABLE       0          // 0/1 flag that indicates whether dead block reuse option in enabled
NVM_ENABLE        0          // 0/1 flag that indicates whether nvm memory fixed lateny is applied enabled
SURONLY_ENABLE    0          // 0/1 flag that indicates whetheronly surplus slots are used for remote allocation
CB_ENABLE         0          // 0/1 flag that indicates whether compact bucket feature of string oram paper is enabled
DYNAMIC_S         0          // 0/1 flag that indicates whether dynamic s setting is enabled
SUPER_ENABLE      0          // 0/1 flag that indicates whether super node option is enabled
INDEP_ENABLE      0          // 0/1 flag that indicates whether independent tree top eviction is enabled
VARIEDL_ENABLE    0          // 0/1 flag that indicates whether varied path lenght eviction is enabled
MERKLE_ENABLE     1         // 0/1 flag that indicates whether path id is calculated by merkle tree secure hashing 



TRACE_SIZE 40000000          // # addr read from trace file
QUEUE_SIZE 3000              // oramq capacity
PAGE_SIZE 4096               // page size in byte ~~~> 4KB
L1_LATENCY 3                 // L1 latency in terms of # cycles 
L2_LATENCY 10                // L2 latency in terms of # cycles 
MAINMEM_LATENCY 0            // mem latency in terms of # cycles 
WARMUP_CACHE 1000000              // L2 warm up threshold, after which stats are gathered and memory accesses are actully made
TIMEOUT_THRESHOLD 1000      // time out threshold in seconds
TOP_BOUNDARY 9              // top region tree boundry
MID_BOUNDARY 20              // middle region tree boundry
TOP_CACHE 10                 // num top levels that are cached ---------- freecursive: 10, volcano: dont care
RHO_EMPTY_TOP 0              // num top empty levels of rho ~~~> equivalent to L1 = EMPTY_TOP-1, Z1 = 0 for ------  valcano: 10  freecursive: 0
RHO_TOP_CACHE 6              // num top levels that are cached in rho
T1_INTERVAL 1000             // num cycles after each one oram access is initiated either real or dsqaummy one, t1
T2_INTERVAL 100              // num cycles after each one oram access is initiated either real or dummy one, t2
RING_A 5                     // ring oram evict path 
EP_TURN 2
SKIP_LIMIT 70
SKIP_L1 21
SKIP_L2 23
DUMMY_TH 200
DEP_TH 5                     // threshold on num reshuffle for dynamic ep 
WL_CAP 100000                // cap on wl feature
DEADQ_SIZE 1000                 // size of dead queue
DEAD_GATHER_OFFSET 8        // how many levels to skip after top cache for gathering dead blocks
REMOTE_ALLOC_RATIO 0.5       // what percentage of dead blk let the leaves occupy
NVM_START 21                 // starting what level is stored in nvm
WARMUP_TREE  38000000        // warmup threshold for oram tree
CB_GREEN_MAX  3              // number of green blocks in compact bucket feature of string oram paper
NVM_LATENCY  1               // nvm latency in terms of DRAM cycle ~> obsolete
REMOTE_START_OFF 38000000    // offset in terms of number of trace, how earlier than warmup start the remote alloc
NVM_CHANNEL 1                // number of channels dedicated to nvm
S_INC 2                      // the amount by which a dynamic s can be incremented
REMOTE_CAP 10                // the cap on the number of blocks that each bucket can give away for remote allocation at a time
SHADQ_SIZE 0           // capacity limit of shadow queue
SUPER_LEVEL 22  // level at which super node merge starts (inclusive)
SUPER_S 6  // s value for th super node
SKIP_TURN 40000000  // mod this number will decide if skip should be enabled 

